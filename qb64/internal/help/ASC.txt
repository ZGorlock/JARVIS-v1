The '''ASC''' function returns the {{KW|ASCII}} code number of a certain {{KW|STRING}} text character or a keyboard press.


{{PageSyntax}}
:: code% = ASC(''text$''[, ''position''])


* String ''text'' [[STRING|string]] character parameter must have a length of at least 1 byte or an error occurs. 
* '''In QB64''' a new ''position'' parameter is allowed. The ASCII code of the character in a string position specified will be returned by the function (if omitted ASC will return the code of the first character).
* If the string used with ASC has more than one character, the first byte character code is returned.
* [[ASCII]] code [[INTEGER]] values returned will range from 0 to 255 only. 
* If the function is used to read an empty string value an [[ERROR Codes|error]] will occur! [[INKEY$]] returns an empty string when a key is not pressed.
* ASC returns 0 when reading 2 byte codes returned by {{KW|INKEY$}} when the arrow, funtion, central keys or certain combination keyboard presses are used.

{{WhiteStart}}'                                '''ASCII Keyboard Codes'''
'
'''' Esc  F1  F2  F3  F4  F5  F6  F7  F8  F9  F10  F11  F12  Sys ScL Pause'''                  
'  27 +59 +60 +61 +62 +63 +64 +65 +66 +67 +68  +133 +134   -   -    -
'''' `~  1!  2@  3#  4$  5%  6^  7&amp;  8*  9(  0) -_ =+ BkSp   Ins Hme PUp   NumL  /   *    -''' 
' 126 33  64  35  36  37  94  38  42  40  41 95 43   8    +82 +71 +73    -    47  42   45
'''  96 49  50  51  52  53  54  55  56  57  48 45 61''
'''' Tab Q   W   E   R   T   Y   U   I   O   P  [{  ]}  \|   Del End PDn   7Hme 8/▲  9PU  + '''
'  9  81  87  69  82  84  89  85  73  79  80 123 125 124  +83 +79 +81   +71  +72  +73  43
'''    113 119 101 114 116 121 117 105 111 112  91  93  92                 55   56   57 ''
'''' CapL  A   S   D   F   G   H   J   K   L   ;:  '&quot; Enter                4/◄-  5   6/-►  
'   -   65  83  68  70  71  72  74  75  76  58  34  13                  +75  +76  +77  '''E'''
'''       97 115 100 102 103 104 106 107 108  59  39                       52   53   54 '' '''n'''                                    
'''' Shift  Z   X   C   V   B   N   M   ,&lt;  .&gt;  /?    Shift       ▲        1End 2/▼  3PD  t'''
'   *    90  88  67  86  66  78  77  60  62  63      *        +72       +79  +80  +81  '''e'''
'''       122 120  99 118  98 110 109  44  46  47                          49   50   51 '' '''r'''
'''' Ctrl Win Alt       Spacebar          Alt Win Menu Ctrl   ◄-  ▼   -►   0Ins     .Del '''
'  *    -   *           32              *   -   -    *    +75 +80 +77   +82       +83  13 
'                                                                   ''     48        46''
'
' '''    ''Italics'' = LCase/NumLock On  ____________  + = 2 Byte: CHR$(0) + CHR$(code)'''
'{{small|NOTE: The above commented table can be copied and pasted directly into the QB64 IDE}}
{{WhiteEnd}} 

&lt;center&gt;'''*  [[ASCII#Two_Byte_Codes|Two Byte Ctrl, Alt and Shift + Function key combinations]]'''&lt;/center&gt;


''Example 1:'' How ASC can be used to find any ASCII code in a string of characters using QB64.
{{CodeStart}} '' ''
 {{Cl|PRINT}} ASC(&quot;A&quot;)
 {{Cl|PRINT}} ASC(&quot;Be a rockstar&quot;)
 {{Cl|PRINT}} ASC(&quot;QB64 is not only COMPATIBLE, it can find any part of the string!&quot;, 18) '' ''
{{CodeEnd}}

''Returns:''

{{OutputStart}}
 65
 66
 67
{{OutputEnd}}

''Explanation:'' The ASCII code for &quot;A&quot; is 65 and the ASCII code for &quot;B&quot; is 66, ASCII code for &quot;C&quot; is 67 and the &quot;C&quot; is at position 18 in the string.

''Note:'' The ASCII code for &quot;A&quot; and &quot;a&quot; are different by the value of 32, &quot;A&quot; + 32 is &quot;a&quot;, 65(&quot;A&quot;) + 32 = 97(&quot;a&quot;).


''Example 2:'' Reading the ASCII and two byte code combinations with ASC in '''QB64'''.

{{CodeStart}} '' ''
Q$ = {{Cl|CHR$}}(34) ' quote character
{{Cl|COLOR}} 10: {{Cl|LOCATE}} 5, 22: {{Cl|PRINT}} &quot;Press some keys or combinations!&quot;
{{Cl|COLOR}} 13: {{Cl|LOCATE}} 23, 30: {{Cl|PRINT}} &quot;Escape key Quits&quot;
DO
   DO: {{Cl|SLEEP}}: key$ = {{Cl|INKEY$}}: {{Cl|LOOP}} {{Cl|UNTIL}} key$ &lt;&gt; &quot;&quot; ' prevent ASC empty string read error
   code% = {{Cl|ASC}}(key$): {{Cl|COLOR}} 11: {{Cl|LOCATE}} 10, 10
   {{Cl|IF...THEN|IF}} code% {{Cl|THEN}}    ' ASC returns any value greater than 0
    {{Cl|PRINT}} &quot;{{Cl|CHR$}}(&quot; + {{Cl|LTRIM$}}({{Cl|STR$}}(code%)) + &quot;)&quot; + {{Cl|SPACE$}}(13): 
    {{Cl|IF...THEN|IF}} code% &gt; 8 {{Cl|AND (boolean)|AND}} code% &lt; 14 {{Cl|THEN}} code% = 32    ' unprintable control codes
    {{Cl|COLOR}} 14: {{Cl|LOCATE}} 10, 50: {{Cl|PRINT}} {{Cl|CHR$}}(code%) + {{Cl|SPACE$}}(13)        
   {{Cl|ELSE}}: {{Cl|PRINT}} &quot;{{Cl|CHR$}}(0) + {{Cl|CHR$}}(&quot; + {{Cl|LTRIM$}}({{Cl|STR$}}({{Cl|ASC}}(key$, 2))) + &quot;)&quot;
    {{Cl|COLOR}} 14: {{Cl|LOCATE}} 10, 50: {{Cl|PRINT}} &quot;{{Cl|CHR$}}(0) + &quot; + Q$ + {{Cl|CHR$}}({{Cl|ASC}}(key$, 2)) + Q$
   {{Cl|END IF}}
{{Cl|LOOP}} {{Cl|UNTIL}} code% = 27 '' '

{{CodeEnd}}
{{small|Code by Ted Weissgerber}}
''Explanation:'' The keypress read loop checks that ASC will not read an empty string. That would create a program error. {{KW|SLEEP}} reduces CPU memory usage between keypresses. Normal byte codes returned are indicated by the IF statement when ASC returns a value. Otherwise the routine will return the two byte ASCII code. The extended keyboard keys(Home pad, Arrow pad and Number pad), Function keys or Ctrl, Alt or Shift key combinations will return two byte codes. Ctrl + letter combinations will return control character codes 1 to 26.


''Example 3:'' Reading only numerical values input by a program user.

{{CodeStart}}
 DO: {{Cl|SLEEP}} ' requires a keypress to run loop once
   K$ = {{Cl|{{Cl|INKEY$}}}}
   code = {{Cl|ASC}}(K$)
   {{Cl|IF...THEN|IF}} code &gt;= 48 {{Cl|AND (boolean)|AND}} code &lt;= 57 {{Cl|THEN}} entry$ = entry$ + {{Cl|{{Cl|CHR$}}}}(code) ' numbers only
   {{Cl|IF...THEN|IF}} code = 46 {{Cl|AND (boolean)|AND}} flag = 0 {{Cl|THEN}} 
      entry$ = entry$ + K$: flag = 1: mark = {{Cl|LEN}}(entry$) ' decimal point
   {{Cl|END IF}}
   L = {{Cl|{{Cl|LEN}}}}(entry$) ' check entry length for possible backspace
   {{Cl|IF...THEN|IF}} code = 8 {{Cl|AND (boolean)|AND}} L &gt; 0 {{Cl|THEN}} ' backspace pressed and entry has a length
     entry$ = {{Cl|{{Cl|MID$}}}}(entry$, 1, L - 1) ' remove one character from entry$
     {{Cl|IF...THEN|IF}} L - 1 &lt; mark {{Cl|THEN}} flag = 0 ' allow another decimal point if removed.
     {{Cl|LOCATE}} 10, {{Cl|POS}}(0) - 1: {{Cl|PRINT}} {{Cl|{{Cl|SPACE$}}}}(1); ' remove character from screen
   {{Cl|END IF}}
   {{Cl|LOCATE}} 10, 10: {{Cl|PRINT}} entry$; 
   ' display present entry to user(semicolon required for correct POS return)
 {{Cl|LOOP}} {{Cl|UNTIL}} code = 13 {{Cl|AND}} L '' ''
{{CodeEnd}}

''Explanation:'' [[SLEEP]] waits for a keypress allowing background programs to use the processor time. It also keeps the press in the keyboard buffer for [[INKEY$]] to read and guarantees that ASC will not read an empty string value to create an error. Filtered codes 48 to 57 are only number characters. One decimal point is allowed by using the flag. Code 8 is a backspace request which is ignored if the entry has no characters. If it is allowed it removes the last character from the entry and the screen. The loop exits when the user presses the [Enter] key and the entry has a length. '''Try to do that with [[INPUT]]!'''



''See also:'' 
* [[ASC (statement)]] {{text|(QB64 only)}}
* [[CHR$]], [[INKEY$]]
* [[VAL]], [[STRING$]]
* [[ASCII]], [[_MAPUNICODE]]



{{PageNavigation}}