The '''KEY n''' statement is used to assign a &quot;softkey&quot; string or a flag and scan code to a key or display function soft key assignments. 



{{PageSyntax}} 

:: KEY ''n%'', ''text_string$''

:: KEY ''n%'', CHR$(''keyflag%'') + CHR$(''scancode'')



&lt;center&gt;'''Assigning &quot;Soft key&quot; [[STRING]] values to Function key press events'''&lt;/center&gt;
* Instead of using an [[ON KEY(n)]] [[GOSUB]] statement, Function keys F1 to F12 can be assigned a &quot;soft key&quot; string value to return.
* '''KEY n, text$''' defines a literal or variable [[STRING]] &quot;soft key&quot; Function key return value.
:: ''Example:'' KEY 1, &quot;Help&quot; 'will return the string &quot;Help&quot; to an [[INPUT]] variable when F1 is pressed.
* n% is the number 1 to 10(F1 to F10), 30 or 31(F11 or F12) of the function key to assign the soft key string.
* [[KEY LIST]] displays each of the 12 softkey '''function key'''(F1 to F12) string values going down left side of screen.
* '''KEY {ON|OFF}''' turns the softkey Function key display of F1 to F10 on bottom row of the screen ON or OFF. [[CLS]] refreshes.


&lt;center&gt;'''Assigning Key Event Numbers'''&lt;/center&gt;
* Predefined and user defined KEY event number assignments to use with KEY(n): 
{{WhiteStart}}       '''1 to 10'''.............Reserved '''F1 to F10''' function keys only.
       '''11, 12, 13 and 14'''...Reserved '''Up, Left, Right and Down''' numeric keypad arrows only
       '''15 to 29'''............'''user-defined keys''' using value: [[CHR$]](keyflag)  + [[CHR$]]([[Keyboard scancodes|scancode]])
       '''30 and 31'''...........Reserved '''F11 and F12''' function keys only.
{{WhiteEnd}}

&lt;center&gt;'''Assigning User Defined Function Soft Keys (n = 15 to 25 or 29 in QB64)'''&lt;/center&gt;
* Using '''KEY n, CHR$(keyflag) + CHR$(scancode)''' can be one or a combination of any of the following [[CHR$]] '''keyflag''' values:
{{WhiteStart}}                  '''0''' = no function key combination flag(single key)
                  '''1''' = Left Shift key flag
                  '''2''' = Right Shift key flag
                  '''4''' = Ctrl flag
                  '''8''' = Alt flag
                 '''32''' = Number Lock flag
                 '''64''' = Caps Lock flag
                '''128''' = Extended keys (see trapping extended keys below)

              Flag values can be added to monitor key combination events.
{{WhiteEnd}}
* After the keyflag code character the [[Keyboard scancodes|scancode]] character is added using one of the two '''trapping methods''' that follow:


&lt;center&gt;'''Trapping Ctrl, Alt and Shift key combinations'''&lt;/center&gt;
:Keyboard Flag values can be added to monitor more than one control key. For example, flag combination 12 would flag both the Ctrl and Alt key presses. Since the flag already determines the function key to monitor, you don't necessarily have to use it's scancode. You can look for a key combination such as Ctrl + by using the plus key's scancode which is 13 as shown below: 

&lt;center&gt;KEY 15, CHR$(4) + CHR$(13)&lt;/center&gt;

{{WhiteStart}}'                            '''Defined Keys, Flags and Scan Codes'''
'
''''  Esc  F1 F2 F3 F4 F5 F6 F7 F8 F9 F10  F11 F12   SysReq ScrL Pause'''                  
'   1   {{text|1  2  3  4  5  6  7  8  9  10   30  31|red}}     --    70    29
'       59 60 61 62 63 64 65 66 67 68   87  88     
'  '''`~  1! 2@ 3# 4$ 5% 6^ 7&amp; 8* 9( 0) -_ =+ BkSpc  Insert Home PgUp   NumL   /     *    -''' 
'   41 2  3  4  5  6  7  8  9  10 11 12 13  14     {{text|82    71    73|blue}}     {{text|69|purple}}    {{text|53|blue}}    55   74
'  '''Tab  Q  W  E  R  T  Y  U  I  O  P  [{ ]} \|    Delete End  PgDn   7/Home 8/▲  9/PU  + '''
'   15  16 17 18 19 20 21 22 23 24 25 26 27 43     {{text|83    79    81|blue}}     71   {{text|11|red}}/72  73   78
'  '''CapL  A  S  D  F  G  H  J  K  L  ;: '&quot;  Enter                     4/◄-   5    6/-►  E'''
'   {{text|58|purple}}   30 31 32 33 34 35 36 37 38 39 40   28                       {{text|12|red}}/75  76   {{text|13|red}}/77 '''n'''
'  '''Shift  Z  X  C  V  B  N  M  ,&lt; .&gt; /?    Shift         ▲           1/End  2/▼  3/PD  t'''
'   {{text|42|purple}}    44 45 46 47 48 49 50 51 52 53     {{text|54|purple}}           {{text|72|blue}}           79   {{text|14|red}}/80  81   '''e'''
'  '''Ctrl Win Alt    Spacebar    Alt Win Menu Ctrl     ◄-  ▼   -►      0/Insert    ./Del r'''
'   {{text|29|purple}}  91  {{text|56|purple}}        57       {{text|56|blue}}  92   93  {{text|29       75  80  77|blue}}       82          83   {{text|28|blue}} 
'
'     '''Legend:''' {{text|Reserved Keys|red}} '''Keyflag:''' {{text|Extended(128)|blue}}, {{text|Function(1 - 64)|purple}},  Scan Code(0 - 128)
'
'        Reserved and function key combinations can be made using the scan code instead.
'             Add function flag values to 128 for Extended key combinations.
{{WhiteEnd}} {{small|NOTE: The above commented table can be copied and pasted directly into the QB64 IDE}}


&lt;center&gt;'''Trapping Extended keys (Insert, Home, Page Up, Right Ctrl, R.Alt, and cursor arrow pad)'''&lt;/center&gt;
* On a 101-key keyboard, you can trap any of the keys on the dedicated cursorpad by assigning the string to any of the keynumber values from 15 to 25 using the 128 keyboard flag. The cursor arrows are NOT the same as the pre-assigned number pad arrows:
{{WhiteStart}}      '''KEY n, [[CHR$]](128) + [[CHR$]](scancode) ' where n = 15 to 29. See: [[Scancodes]]'''

              KEY 15, CHR$(128) + CHR$(75)  'left arrow cursor pad 

              KEY 16, CHR$(128) + CHR$(72)  'up arrow cursor pad  

              KEY 17, CHR$(128) + CHR$(77)  'right arrow cursor pad

              KEY 18, CHR$(128) + CHR$(80)  'down arrow cursor pad
{{WhiteEnd}}
&lt;center&gt;Use CHR$(0) for the first byte flag for non-function keys. You can substitute a literal [[STRING]] value to trap as shown in Example 2.&lt;/center&gt;


''Example 1:'' Shows a list of all the string assignments to the function keys F1-F12 (Prints help every time F1 is pressed in the input)
{{CodeStart}} '' ''
{{Cl|KEY n|KEY}} 1, &quot;Help&quot;
{{Cl|KEY LIST}}
INPUT &quot;Press F1 or to quit press ENTER: &quot;, a$

{{CodeEnd}}
{{OutputStart}}
F1 Help
F2
F3
F4
F5
F6
F7
F8
F9
F10
F11
F12
Press F1 or to quit press ENTER: HelpHelpHelpHelp
{{OutputEnd}}


''Example 2:'' Trapping the Control + key combination. Use the Control Keyboard flag 4 and + key scancode 13.
{{CodeStart}}
{{Cl|CLS}} '' ''
{{Cl|KEY n|KEY}} 15, {{Cl|CHR$}}(4) + {{Cl|CHR$}}(13)     'scancode for &quot;=&quot; or &quot;+&quot; key is 13
{{Cl|ON KEY (n)|ON KEY}}(15) {{Cl|GOSUB}} control       'action of user defined key press 
{{Cl|KEY(n)|KEY}}(15) ON                     'turn ON event trapping for key combination 
{{Cl|PRINT}} &quot;Press Ctrl and plus key combination, escape quits!&quot;
{{Cl|DO}}: {{Cl|SLEEP}}
count = count + 1
{{Cl|PRINT}} count;
{{Cl|IF}} {{Cl|INKEY$}} = {{Cl|CHR$}}(27) {{Cl|THEN}} {{Cl|END}}  'escape key exit
{{Cl|LOOP}}

control:                             'NUMBER LOCK MUST BE OFF!
{{Cl|PRINT}} &quot;Control and + keys pressed!&quot;;
{{Cl|RETURN}} '' ''
{{CodeEnd}}
{{small|Code by Ted Weissgerber}}


''See also:''  
* [[KEY LIST]], [[ON KEY(n)]] 
* [[KEY(n)]], [[INKEY$]]
* [[_KEYHIT]], [[_KEYDOWN]]
* [[Keyboard scancodes]]


{{PageNavigation}}